// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Connection string from environment variable
}

// User model linked to Clerk userId
model User {
  id        String   @id @unique // Clerk User ID
  email     String   @unique   // Store email for reference/potential future use
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plans     Plan[]   // Relation to user's plans
  feedback  Feedback[] // Relation to user's feedback
}

// Represents user feedback
model Feedback {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String   // Foreign key linking to the User model (Clerk ID)
  userEmail String?  // Store email for reference
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a single financial plan created by a user
model Plan {
  id        String   @id @default(cuid()) // Unique plan identifier
  userId    String   // Foreign key linking to the User model (Clerk ID)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Define the relation

  planName  String?  // Optional name for the plan (e.g., "My First Apartment Plan")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Page 1: Goal Inputs
  yearsToPurchase    Int     @default(3)
  targetHousePriceN0 Float   // Current price of the target house
  targetHouseType    String? // "Chung cư", "Nhà đất", "Khác"
  targetLocation     String?
  pctHouseGrowth     Float   @default(10.0) // Assumption: Annual house price growth rate (%)

  // Page 2: Income Inputs
  userMonthlyIncome         Float    @default(0)
  hasCoApplicant            Boolean  @default(false)
  coApplicantMonthlyIncome  Float?   // Co-applicant's monthly salary
  monthlyOtherIncome        Float    @default(0) // Other monthly income for the family/user
  pctSalaryGrowth           Float    @default(7.0)  // Assumption: User's annual salary growth rate (%)
  coApplicantSalaryGrowth   Float?   // Assumption: Co-applicant's annual salary growth rate (%), defaults to user's if null

  // Page 3: Spending & Savings Inputs
  monthlyLivingExpenses         Float
  monthlyNonHousingDebt         Float   @default(0) // Monthly payments for other debts
  currentAnnualInsurancePremium Float   @default(0) // Annual life insurance premium
  initialSavings                Float    @default(0)
  pctExpenseGrowth              Float   @default(4.0)  // Assumption: Annual expense growth rate / inflation (%)
  pctInvestmentReturn           Float   @default(9.0)  // Assumption: Annual return rate on investments (%)

  // Page 4: Loan & Support Inputs
  loanInterestRate              Float?    @default(11.0) // Assumption: Mortgage interest rate (%)
  loanTermYears                 Int?      @default(25)
  paymentMethod                 String   @default("fixed")
  
  // Relation to the detailed FamilySupport model
  familySupport                 FamilySupport?

  // --- Store the RESULT of the plan ---
  affordabilityOutcome String? // "ScenarioA", "ScenarioB"
  firstViableYear      Int?    // The actual year (e.g., 2027), null if ScenarioA
  confirmedPurchaseYear Int?   // The year user selected after comparison, null initially or if ScenarioA

  // --- Report caching fields ---
  reportGeneratedAt      DateTime? 
  reportAssetEfficiency  String?   @db.Text
  reportCapitalStructure String?   @db.Text
  reportSpendingPlan     String?   @db.Text
  reportInsurance        String?   @db.Text
  reportBackupPlans      String?   @db.Text

  // --- Fields for plan editing and tracking ---
  revisionCount          Int       @default(0)
  revisionHistory        Json?
  userEmail              String?
  buffer                 Float?
  playgroundInteractionLog Json?
  // Note: We are NOT storing the full ProjectionDataTable here for MVP to save space.
  // It will be recalculated when the plan is viewed.
}

// Model to hold detailed information about family support
model FamilySupport {
  id                      String                   @id @default(cuid())
  planId                  String                   @unique
  plan                    Plan                     @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  hasFamilySupport        Boolean                  @default(false)
  familySupportType       FamilySupportType?
  familySupportAmount     Float?
  familyGiftTiming        FamilyGiftTiming?
  familyLoanRepaymentType FamilyLoanRepaymentType?
  familyLoanInterestRate  Float?
  familyLoanTermYears     Int?      // The term in years for repaying the family loan
}

// Enums for strongly-typed categories
enum FamilySupportType {
  GIFT
  LOAN
}

enum FamilyGiftTiming {
  NOW
  AT_PURCHASE
}

enum FamilyLoanRepaymentType {
  MONTHLY
  LUMP_SUM
}
