// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plans     Plan[]
  feedback  Feedback[]
}

model Feedback {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  userEmail String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// BẢNG PLAN ĐÃ ĐƯỢC LÀM GỌN
model Plan {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planName    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Page 1: Goal Inputs
  yearsToPurchase    Int     @default(3)
  targetHousePriceN0 Float
  targetHouseType    String?
  targetLocation     String?

  // Page 2: Income Inputs
  userMonthlyIncome         Float    @default(0)
  hasCoApplicant            Boolean  @default(false)
  coApplicantMonthlyIncome  Float?

  pctSalaryGrowth           Float    @default(7.0)
  coApplicantSalaryGrowth   Float?

  // Page 3: Spending & Savings Inputs
  monthlyOtherIncome            Float   @default(0)
  monthlyLivingExpenses         Float
  monthlyNonHousingDebt         Float   @default(0)
  currentAnnualInsurancePremium Float   @default(0)

  initialSavings                Float   @default(0)
  pctHouseGrowth                Float   @default(10.0)
  pctExpenseGrowth              Float   @default(4.0)
  pctInvestmentReturn           Float   @default(9.0)

  // Page 4: Loan & Support Inputs
  loanInterestRate              Float?   @default(11.0)
  loanTermYears                 Int?     @default(25)
  paymentMethod                 String   @default("fixed")
  
  // --- Store the RESULT of the plan ---
  affordabilityOutcome String?
  firstViableYear      Int?
  confirmedPurchaseYear Int?
  
  userEmail              String?
  buffer                 Float?

  // --- QUAN HỆ ---
  familySupport     FamilySupport?
  milestoneProgress MilestoneProgress?
  report            PlanReport?
  history           PlanHistory?
  roadmap           PlanRoadmap? // Thêm quan hệ này để dễ truy vấn
}

model FamilySupport {
  id                      String                   @id @default(cuid())
  planId                  String                   @unique
  plan                    Plan                     @relation(fields: [planId], references: [id], onDelete: Cascade)
  hasFamilySupport        Boolean                  @default(false)
  familySupportType       FamilySupportType?
  familySupportAmount     Float?
  familyGiftTiming        FamilyGiftTiming?
  familyLoanRepaymentType FamilyLoanRepaymentType?
  familyLoanInterestRate  Float?
  familyLoanTermYears     Int?
}

// SỬA LẠI CÁC KHỐI ENUM Ở ĐÂY
enum FamilySupportType {
  GIFT
  LOAN
}

enum FamilyGiftTiming {
  NOW
  AT_PURCHASE
}

enum FamilyLoanRepaymentType {
  MONTHLY
  LUMP_SUM
}

// BẢNG MỚI CHO REPORT
model PlanReport {
  id        String   @id @default(cuid())
  planId    String   @unique
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  generatedAt      DateTime?
  assetEfficiency  String?   @db.Text
  capitalStructure String?   @db.Text
  spendingPlan     String?   @db.Text
  insurance        String?   @db.Text
  backupPlans      String?   @db.Text
}

// BẢNG MỚI CHO HISTORY
model PlanHistory {
  id               String @id @default(cuid())
  planId           String @unique
  plan             Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  revisionCount    Int    @default(0)
  revisionHistory  Json?
  interactionLog   Json?
}

// BẢNG MILESTONEPROGRESS ĐÃ ĐƯỢC LÀM GỌN
model MilestoneProgress {
  id                    String   @id @default(cuid())
  planId                String   @unique
  plan                  Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  userEmail             String?
  currentSavings        Float    @default(0)
  selectedMilestoneId   Int      @default(1)
  totalCompletedMilestones Int   @default(0)
  savingsPercentage     Float    @default(0)
  housePriceProjected   Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastProgressUpdate    DateTime?
  lastMilestoneCalculation DateTime?
  @@index([planId])
}

// BẢNG MỚI CHO ROADMAP
model PlanRoadmap {
  id                   String   @id @default(cuid())
  planId               String   @unique
  plan                 Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  milestoneGroups      Json?
  currentMilestoneData Json?
  completedMilestones  Json?
  planPageData         Json?
}
